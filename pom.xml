<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.3.4.RELEASE</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.yrs.spring</groupId>
	<artifactId>simple-spring-jenkins</artifactId>
	<version>0.0.6-SNAPSHOT</version>
	<name>simple-spring-jenkins</name>
	<description>Demo project for Spring Boot and Jenkins integration</description>

	<properties>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- dependency for cobertura code coverage plugin to avoid error like: -->
		<!-- Plugin org.codehaus.mojo:cobertura-maven-plugin:2.7 or one of its dependencies could not be resolved: Could not find artifact com.sun:tools:jar:0 -->
		<!-- <dependency>
			<groupId>com.sun</groupId>
			<artifactId>tools</artifactId>
			<version>1.6.0</version>
			<scope>system</scope>
			<systemPath>${env.JAVA_HOME}/lib/tools.jar</systemPath>
		  </dependency> -->

	</dependencies>



	<!--
          # 1. run artifactort in docker (-rm is actially with two dashes, similarly -name is also with two dashes, but single dash given below sine two consecutive dashes is illegal in xml)
		  docker run -rm -p 8081:8081 -name artifactory docker.bintray.io/jfrog/artifactory-oss:5.4.4

		  # 2. ensure that settings.xml has this entry, replacing ${ARTIFACTORY_PWD} with actual credential

			<servers>
    			<server>
      			<id>artifactory-local</id>  // should match id in <distributionManagement> section below
      			<username>admin</username>
      			<password>${ARTIFACTORY_PWD}</password>
    			</server>
   			</servers>

     -->

	<!--
		 3a. Now you can either use maven release plugin to release - prepare and perform - to artifactory (used normally for saving release version to artifactory)
		 OR
		 3b. Use maven deploy plugin to only save to artifactory (used normally for saving current snapshot version)
	-->


	<!--
		# 3a use maven release plugin to release to artifactory (used normally for saving release version to artifactory)
		# used by the maven release plugin, -B = non-interactive = batch mode. Also note the special way of passing system properties to the release plugin!
		mvn -B release:clean release:prepare release:perform "-Darguments=-Dartifactory_url=http://localhost:8081/artifactory/example-repo-local"
	-->
	<scm>
		<url>https://github.com/iyogi/simple-spring-jenkins</url>
		<connection>scm:git:git://github.com/iyogi/simple-spring-jenkins.git</connection>
		<developerConnection>scm:git:git@github.com:iyogi/simple-spring-jenkins.git</developerConnection>
	  <tag>HEAD</tag>
  </scm>




	<!--
		# 3b. save current snapshot to local artifactory
		mvn deploy -DskipTests -Dartifactory_url=http://localhost:8081/artifactory/example-repo-local
     -->
	<distributionManagement>

        <snapshotRepository>
            <id>artifactory-local</id> <!-- should match <server><id> section in settings.xml -->
            <name>artifactory</name>
            <url>${artifactory_url}</url>
		</snapshotRepository>

		<repository>
			<id>artifactory-local</id>  <!-- should match <server><id> section in settings.xml -->
			<name>artifactory</name>
			<url>${artifactory_url}</url>
		  </repository>

	</distributionManagement>






	<repositories>
		<repository>
			<id>central</id>
			<name>Central Repository</name>
			<url>https://repo.maven.apache.org/maven2</url>
			<layout>default</layout>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

	<pluginRepositories>
        <pluginRepository>
            <id>central</id>
            <name>Central Repository</name>
            <url>https://repo.maven.apache.org/maven2</url>
            <layout>default</layout>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
            <releases>
                <updatePolicy>never</updatePolicy>
            </releases>
        </pluginRepository>
	</pluginRepositories>

	 <build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
